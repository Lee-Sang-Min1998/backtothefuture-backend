openapi: 3.0.1
info:
  title: 백투더퓨처 API Documentation
  description: 백투더퓨처 API 문서입니다.
  version: v1.0.0
servers:
- url: http://localhost:8081/v1
  description: Generated server url
security:
- Authorization: []
paths:
  /stores:
    post:
      tags:
      - store-controller
      summary: 새로운 가게 등록
      description: "가게 정보와 이미지를 등록합니다. 이미지는 'image/png', 'image/jpeg' 형식을 지원합니다."
      operationId: registerStore
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - request
              type: object
              properties:
                request:
                  $ref: '#/components/schemas/StoreRegisterDto'
                file:
                  type: string
                  description: 가게 이미지로 사용할 이미지를 첨부해 주세요.
                  format: binary
      responses:
        "201":
          description: 등록 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BfResponse'
              examples:
                success:
                  description: success
                  value:
                    code: 201
                    message: 정상적으로 생성되었습니다.
                    data:
                      store_id: 1
  /stores/{storeId}/products:
    post:
      tags:
      - product-controller
      summary: 새로운 상품 등록
      description: "특정 가게에 새로운 상품을 등록합니다. 이미지는 'image/png', 'image/jpeg' 형식을 지원합니다\
        ."
      operationId: registerProduct
      parameters:
      - name: storeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - request
              type: object
              properties:
                request:
                  $ref: '#/components/schemas/ProductRegisterDto'
                file:
                  type: string
                  description: 상품 이미지로 사용할 이미지를 첨부해 주세요.
                  format: binary
      responses:
        "201":
          description: 등록 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BfResponse'
              examples:
                success:
                  description: success
                  value:
                    code: 201
                    message: 정상적으로 생성되었습니다.
                    data:
                      product_id: 1
  /reservations:
    post:
      tags:
      - reservation-controller
      operationId: makeReservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BfResponseObject'
  /stores/{storeId}/products/{productId}:
    get:
      tags:
      - product-controller
      summary: 상품 정보 조회
      description: 특정 가게의 특정 상품에 대한 자세한 정보를 조회합니다.
      operationId: getProduct
      parameters:
      - name: storeId
        in: path
        description: 가게 ID
        required: true
        schema:
          type: integer
          format: int64
      - name: productId
        in: path
        description: 상품 ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BfResponseProductGetOneResponseDto'
      security: []
    delete:
      tags:
      - product-controller
      summary: 싱픔 삭제
      operationId: deleteProduct
      parameters:
      - name: storeId
        in: path
        description: 가게 ID
        required: true
        schema:
          type: integer
          format: int64
      - name: productId
        in: path
        description: 상품 ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: 삭제 성공
    patch:
      tags:
      - product-controller
      summary: 상품 부분 수정
      description: "상품 정보를 부분적으로 수정합니다. 수정하지 않는 정보는 요청 정보에 포함하지 않습니다. 이미지는 'image/png',\
        \ 'image/jpeg' 형식을 지원합니다."
      operationId: updateProduct
      parameters:
      - name: storeId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: productId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - request
              type: object
              properties:
                request:
                  $ref: '#/components/schemas/ProductUpdateDto'
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BfResponseProductGetOneResponseDto'
  /reservations/{reservationId}:
    get:
      tags:
      - reservation-controller
      operationId: getReservation
      parameters:
      - name: reservationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BfResponseObject'
    delete:
      tags:
      - reservation-controller
      operationId: cancelReservation
      parameters:
      - name: reservationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BfResponseObject'
  /reservations/proceeding:
    get:
      tags:
      - reservation-controller
      operationId: getMemberProceedingReservations
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BfResponseObject'
  /reservations/done:
    get:
      tags:
      - reservation-controller
      operationId: getMemberDoneReservations
      parameters:
      - name: cursorId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: size
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BfResponseObject'
  /products:
    get:
      tags:
      - product-controller
      summary: 모든 상품 정보 조회
      description: "모든 상품을 조회합니다. TODO: 정렬기준, pagenation 추가"
      operationId: getAllProducts
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BfResponseProductGetListResponseDto'
      security: []
components:
  schemas:
    BfResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: object
    LocalTime:
      type: object
      properties:
        hour:
          type: integer
          format: int32
        minute:
          type: integer
          format: int32
        second:
          type: integer
          format: int32
        nano:
          type: integer
          format: int32
      description: 마감 시간
      example: 22:00
    StoreRegisterDto:
      required:
      - description
      - endTime
      - location
      - name
      - startTime
      type: object
      properties:
        name:
          maxLength: 20
          minLength: 0
          type: string
          description: 가게 이름
          example: 베이커리 카페
        description:
          maxLength: 50
          minLength: 0
          type: string
          description: 가게 설명
          example: 신선한 빵과 커피를 제공하는 카페
        location:
          maxLength: 50
          minLength: 0
          type: string
          description: 가게 위치
          example: 서울시 강남구 역삼동 123-45
        contact:
          type: array
          description: 가게 연락처
          example:
          - "010"
          - "0000"
          - "0000"
          items:
            type: string
        startTime:
          $ref: '#/components/schemas/LocalTime'
        endTime:
          $ref: '#/components/schemas/LocalTime'
      description: 요청 정보입니다.
    ProductRegisterDto:
      required:
      - description
      - name
      - price
      type: object
      properties:
        name:
          maxLength: 20
          minLength: 0
          type: string
          description: 상품 이름
          example: 크루아상
        description:
          maxLength: 50
          minLength: 0
          type: string
          description: 상품 설명
          example: 프랑스 고메버터가 풍부하게 들어간 프랑스식 패스트리
        price:
          maximum: 1000000
          minimum: 0
          type: integer
          description: "상품 가격 (단위: 원)"
          format: int32
          example: 3000
        stockQuantity:
          minimum: 0
          type: integer
          description: "재고 수량 (기본값: 0)"
          format: int32
          example: 50
      description: 요청 정보입니다.
    ReservationRequestDto:
      required:
      - reservationTime
      - storeId
      type: object
      properties:
        storeId:
          type: integer
          format: int64
        orderRequestItems:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/ReservationRequestItemDto'
        reservationTime:
          type: string
          format: date-time
    ReservationRequestItemDto:
      required:
      - productId
      type: object
      properties:
        productId:
          type: integer
          format: int64
        quantity:
          minimum: 0
          type: integer
          format: int32
    BfResponseObject:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: object
    ProductUpdateDto:
      type: object
      properties:
        name:
          maxLength: 20
          minLength: 0
          type: string
        description:
          maxLength: 50
          minLength: 0
          type: string
        price:
          maximum: 1000000
          minimum: 0
          type: integer
          format: int32
        stockQuantity:
          minimum: 0
          type: integer
          format: int32
    BfResponseProductGetOneResponseDto:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          $ref: '#/components/schemas/ProductGetOneResponseDto'
    ProductGetOneResponseDto:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/ProductResponseDto'
    ProductResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int32
        stockQuantity:
          type: integer
          format: int32
        thumbnail:
          type: string
    BfResponseProductGetListResponseDto:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          $ref: '#/components/schemas/ProductGetListResponseDto'
    ProductGetListResponseDto:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductResponseDto'
  securitySchemes:
    Authorization:
      type: http
      name: Authorization
      scheme: bearer
      bearerFormat: JWT
