openapi: 3.0.1
info:
  title: 백투더퓨처 API Documentation
  description: 백투더퓨처 API 문서입니다.
  version: v1.0.0
servers:
- url: http://localhost:8080/v1
  description: Generated server url
security:
- Authorization: []
tags:
- name: 회원 API
  description: 회원 관련 API 입니다.
paths:
  /member/register:
    post:
      tags:
      - 회원 API
      operationId: registerMember
      requestBody:
        content:
          application/json:
            schema:
              required:
              - request
              type: object
              properties:
                request:
                  $ref: '#/components/schemas/MemberRegisterDto'
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BfResponseObject'
  /member/refresh:
    post:
      tags:
      - 회원 API
      summary: 토큰 갱신
      description: 토큰 갱신 API입니다.
      operationId: refreshAccessToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequestDto'
        required: true
      responses:
        "200":
          description: 토큰 갱신에 성공했습니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BfResponseLoginTokenDto'
  /member/login:
    post:
      tags:
      - 회원 API
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberLoginDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BfResponseObject'
  /member/login/oauth:
    post:
      tags:
      - 회원 API
      summary: 소셜 로그인
      description: 소셜 로그인 API입니다.
      operationId: oauthLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthLoginDto'
        required: true
      responses:
        "200":
          description: 소셜 로그인 성공 응답입니다.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BfResponseLoginTokenDto'
      security: []
  /member/business/number/status:
    post:
      tags:
      - 회원 API
      summary: 사업자 번호 상태 조회
      description: 입력된 사업자 정보의 유효성을 검증합니다.
      operationId: businessNumberStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessNumberValidateRequestDto'
        required: true
      responses:
        "200":
          description: 사업자 번호 검증 유효성 검사 결과
          content:
            application/json:
              examples:
                valid:
                  description: valid
                  value:
                    code: 200
                    message: 정상 처리되었습니다.
                    data:
                      isValid: true
                invalid:
                  description: invalid
                  value:
                    code: 200
                    message: 정상 처리되었습니다.
                    data:
                      isValid: false
      security: []
  /member/business/info/validation:
    post:
      tags:
      - 회원 API
      summary: 사업자 정보 검증
      description: 입력된 사업자 정보의 유효성을 검증합니다.
      operationId: validateBusinessNumber
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessInfoValidateRequestDto'
        required: true
      responses:
        "200":
          description: 사업자 정보 검증 유효성 검사 결과
          content:
            application/json:
              examples:
                valid:
                  description: valid
                  value:
                    code: 200
                    message: 정상 처리되었습니다.
                    data:
                      isValid: true
                invalid:
                  description: invalid
                  value:
                    code: 200
                    message: 정상 처리되었습니다.
                    data:
                      isValid: false
      security: []
components:
  schemas:
    MemberRegisterDto:
      required:
      - email
      - name
      - password
      - passwordConfirm
      type: object
      properties:
        email:
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
          type: string
        name:
          maxLength: 50
          minLength: 2
          type: string
        password:
          maxLength: 2147483647
          minLength: 6
          type: string
        passwordConfirm:
          maxLength: 2147483647
          minLength: 6
          type: string
        phoneNumber:
          maxLength: 3
          minLength: 3
          type: string
    BfResponseObject:
      type: object
      properties:
        code:
          type: integer
          description: 응답 코드
          format: int32
          example: 200
        message:
          type: string
          description: 응답 메시지
          example: 성공
        data:
          type: object
          description: 응답 데이터
    RefreshTokenRequestDto:
      required:
      - refreshToken
      type: object
      properties:
        refreshToken:
          type: string
          description: 리프래시 토큰 값입니다.
      description: 토큰 갱신 요청 model입니다.
    BfResponseLoginTokenDto:
      type: object
      properties:
        code:
          type: integer
          description: 응답 코드
          format: int32
          example: 200
        message:
          type: string
          description: 응답 메시지
          example: 성공
        data:
          $ref: '#/components/schemas/LoginTokenDto'
    LoginTokenDto:
      type: object
      properties:
        accessToken:
          type: string
          description: 엑세스 토큰 값
        refreshToken:
          type: string
          description: 리프래시 토큰 값
      description: "access, refresh token 반환 model"
    MemberLoginDto:
      required:
      - email
      - password
      type: object
      properties:
        email:
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$"
          type: string
        password:
          maxLength: 2147483647
          minLength: 6
          type: string
    OAuthLoginDto:
      required:
      - authorizationCode
      - token
      type: object
      properties:
        authorizationCode:
          type: string
          description: 인증 서버로부터 받은 승인 코드입니다.
        providerType:
          type: string
          description: 어떤 종류의 소셜 로그인인지 식별 값입니다.
          enum:
          - KAKAO
          - NAVER
          - GOOGLE
        rolesType:
          type: string
          description: 회원 식별 값입니다.
          enum:
          - ROLE_ADMIN
          - ROLE_USER
          - ROLE_STORE_OWNER
        state:
          type: string
          description: 네이버 소셜 로그인 시 state 값입니다. state 문자열 주시면 됩니다.
          example: state
        token:
          type: string
          description: 인증 서버로부터 받은 access token 값입니다.
      description: 소셜 로그인 요청 model입니다.
    BusinessNumberValidateRequestDto:
      required:
      - businessNumber
      type: object
      properties:
        businessNumber:
          type: string
          description: 사업자 번호
          example: 123-45-67890
    BusinessInfoValidateRequestDto:
      required:
      - businessNumber
      - name
      type: object
      properties:
        businessNumber:
          type: string
          description: 사업자 번호
          example: 123-45-67890
        startDate:
          type: string
          description: "개업 일자, yyyyMMdd 형식"
          example: "20220415"
        name:
          type: string
          description: 대표자 성명
          example: 홍길동
        name2:
          type: string
          description: 대표자 성명2
          example: 김철수
        businessName:
          type: string
          description: 대표자 성명2
          example: 김철수
        corporationNumber:
          type: string
          description: 상호
          example: OOO 기업
        businessSector:
          type: string
          description: 주업태명
          example: 제조업
        businessType:
          type: string
          description: 주종목명
          example: 전자제품
        businessAddress:
          type: string
          description: 사업장 주소
          example: 서울시 강남구 역삼동 123-45
  securitySchemes:
    Authorization:
      type: http
      name: Authorization
      scheme: bearer
      bearerFormat: JWT
