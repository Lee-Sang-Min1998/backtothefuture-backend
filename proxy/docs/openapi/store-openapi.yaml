openapi: 3.0.1
info:
  title: Bag To the Future
  description: API Documentation
  version: 0.1.0
servers:
- url: http://localhost:8081/v1
tags: []
paths:
  /products:
    get:
      tags:
      - products
      summary: 모든 상품 조회 API
      description: 모든 상품 조회 API입니다.
      operationId: get-all-products
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] get-all-products"
              examples:
                get-all-products:
                  value: "{\"code\":200,\"message\":\"정상 처리되었습니다.\",\"data\":{\"products\"\
                    :[{\"id\":1,\"name\":\"상품1\",\"description\":\"상품1 설명\",\"price\"\
                    :10000,\"stockQuantity\":10,\"thumbnail\":\"thumbnail1\"},{\"\
                    id\":2,\"name\":\"상품2\",\"description\":\"상품2 설명\",\"price\":20000,\"\
                    stockQuantity\":20,\"thumbnail\":\"thumbnail2\"}]}}"
  /reservations:
    post:
      tags:
      - reservations
      summary: 구매자 예약 API
      description: 구매자 예약하기 API입니다.
      operationId: make-reservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/[request] make-reservation"
            examples:
              make-reservation:
                value: "{\"storeId\":1,\"orderRequestItems\":[{\"productId\":1,\"\
                  quantity\":1},{\"productId\":2,\"quantity\":1}],\"reservationTime\"\
                  :\"12:00:00\"}"
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] make-reservation"
              examples:
                make-reservation:
                  value: "{\"code\":201,\"message\":\"정상적으로 생성되었습니다.\",\"data\":{\"\
                    reservation_id\":1}}"
  /reservations/{reservationId}:
    get:
      tags:
      - reservations
      summary: 구매자 예약 조회 API
      description: 구매자 예약 조회 API입니다.
      operationId: get-reservation
      parameters:
      - name: reservationId
        in: path
        description: 예약 ID
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reservations-reservationId486549215'
            examples:
              get-reservation:
                value: "[{\"name\":\"product1\",\"count\":1,\"price\":1000},{\"name\"\
                  :\"product2\",\"count\":2,\"price\":2000}]"
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] make-reservation"
              examples:
                get-reservation:
                  value: "{\"code\":200,\"message\":\"정상 처리되었습니다.\",\"data\":[{\"\
                    name\":\"product1\",\"count\":1,\"price\":1000},{\"name\":\"product2\"\
                    ,\"count\":2,\"price\":2000}]}"
    delete:
      tags:
      - reservations
      summary: 구매자 예약 취소 API
      description: 구매자 예약 취소 API입니다.
      operationId: cancel-reservation
      parameters:
      - name: reservationId
        in: path
        description: 예약 ID
        required: true
        schema:
          type: number
      responses:
        "204":
          description: "204"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] cancel-reservation"
              examples:
                cancel-reservation:
                  value: "{\"code\":200,\"message\":\"정상 처리되었습니다.\",\"data\":\"NO_CONTENT\"\
                    }"
  /stores:
    post:
      tags:
      - stores
      summary: 가게 등록 API
      description: 가게 등록 API 입니다.
      operationId: register-store
      parameters:
      - name: Authorization
        in: header
        description: "JWT 인증 토큰. 'Bearer ${Jwt Token}' 형식으로 입력해 주세요."
        required: true
        schema:
          type: string
        example: "Bearer ${JWT Token}"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/[request] store-register"
            examples:
              register-store:
                value: "{\"name\":\"가게 이름\",\"description\":\"가게 설명\",\"location\"\
                  :\"가게 위치\",\"contact\":[\"010\",\"0000\",\"0000\"],\"image\":\"이\
                  미지 url\",\"startTime\":\"10:00:00\",\"endTime\":\"21:00:00\"}"
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] store-register"
              examples:
                register-store:
                  value: "{\"code\":201,\"message\":\"정상적으로 생성되었습니다.\",\"data\":{\"\
                    store_id\":1}}"
  /stores/{storeId}/products:
    post:
      tags:
      - products
      summary: 상품 등록 API
      description: 상품 등록 API 입니다.
      operationId: register-product
      parameters:
      - name: storeId
        in: path
        description: 가게 ID
        required: true
        schema:
          type: number
      - name: Authorization
        in: header
        description: "JWT 인증 토큰. 'Bearer ${Jwt Token}' 형식으로 입력해 주세요."
        required: true
        schema:
          type: string
        example: "Bearer ${JWT Token}"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/[request] product-register"
            examples:
              register-product:
                value: "{\"name\":\"상품 이름\",\"description\":\"상품 설명\",\"price\":10000,\"\
                  stockQuantity\":1,\"thumbnail\":\"이미지 링크\"}"
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] product-register"
              examples:
                register-product:
                  value: "{\"code\":201,\"message\":\"정상적으로 생성되었습니다.\",\"data\":{\"\
                    product_id\":1}}"
  /stores/{storeId}/products/{productId}:
    get:
      tags:
      - products
      summary: 상품 단건 조회 API
      description: 상품 단건 조회 API입니다.
      operationId: get-product-by-store
      parameters:
      - name: storeId
        in: path
        description: 가게 ID
        required: true
        schema:
          type: number
      - name: productId
        in: path
        description: 상품 ID
        required: true
        schema:
          type: number
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] get-product"
              examples:
                get-product-by-store:
                  value: "{\"code\":200,\"message\":\"정상 처리되었습니다.\",\"data\":{\"product\"\
                    :{\"id\":1,\"name\":\"상품1\",\"description\":\"상품1 설명\",\"price\"\
                    :10000,\"stockQuantity\":10,\"thumbnail\":\"thumbnail1\"}}}"
    delete:
      tags:
      - products
      summary: 상품 삭제 API
      description: 상품 삭제 API 입니다.
      operationId: delete-product
      parameters:
      - name: storeId
        in: path
        description: 가게 ID
        required: true
        schema:
          type: number
      - name: productId
        in: path
        description: 상품 ID
        required: true
        schema:
          type: number
      - name: Authorization
        in: header
        description: "JWT 인증 토큰. 'Bearer ${Jwt Token}' 형식으로 입력해 주세요."
        required: true
        schema:
          type: string
        example: "Bearer ${JWT Token}"
      responses:
        "204":
          description: "204"
    patch:
      tags:
      - products
      summary: 상품 업데이트 API
      description: 상품 업데이트 API 입니다. 업데이트 할 항목만 보내주세요.
      operationId: update-product
      parameters:
      - name: storeId
        in: path
        description: 가게 ID
        required: true
        schema:
          type: number
      - name: productId
        in: path
        description: 상품 ID
        required: true
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/[reqyest] update-product"
            examples:
              update-product:
                value: "{\"name\":\"업데이트된 상품 이름\",\"description\":\"업데이트된 상품 설명\"\
                  ,\"price\":15000,\"stockQuantity\":5,\"thumbnail\":\"업데이트된 이미지 링\
                  크\"}"
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/[response] update-product"
              examples:
                update-product:
                  value: "{\"code\":200,\"message\":\"정상 처리되었습니다.\",\"data\":{\"product\"\
                    :{\"id\":1,\"name\":\"업데이트된 상품 이름\",\"description\":\"업데이트된 상품\
                    \ 설명\",\"price\":15000,\"stockQuantity\":5,\"thumbnail\":\"업데이\
                    트된 이미지 링크\"}}}"
components:
  schemas:
    '[request] make-reservation':
      title: "[request] make-reservation"
      required:
      - reservationTime
      - storeId
      type: object
      properties:
        orderRequestItems:
          type: array
          items:
            required:
            - productId
            - quantity
            type: object
            properties:
              quantity:
                type: number
                description: 주문한 수량 값입니다.
              productId:
                type: number
                description: 상품 ID 값입니다.
        reservationTime:
          type: string
          description: 예약 시간입니다. 'HH:mm' 형태입니다.
        storeId:
          type: number
          description: 가게 ID 값입니다.
    '[reqyest] update-product':
      title: "[reqyest] update-product"
      type: object
      properties:
        thumbnail:
          type: string
          description: 썸네일 이미지 입니다.
          nullable: true
        price:
          type: number
          description: 상품 가격입니다. 0 이상의 수를 입력해주세요.
          nullable: true
        name:
          type: string
          description: 상품 이름입니다.
          nullable: true
        stockQuantity:
          type: number
          description: 상품 재고입니다. 0 이상의 수를 입력해주세요.
          nullable: true
        description:
          type: string
          description: 상품 상세 설명입니다.
          nullable: true
    '[response] cancel-reservation':
      title: "[response] cancel-reservation"
      required:
      - code
      - data
      - message
      type: object
      properties:
        code:
          type: number
          description: HttpStatusCode 입니다.
        data:
          type: string
          description: NO_CONTENT
        message:
          type: string
          description: 응답 메시지 입니다.
    '[response] get-all-products':
      title: "[response] get-all-products"
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: number
          description: HttpStatusCode 입니다.
        data:
          type: object
          properties:
            products:
              type: array
              items:
                required:
                - description
                - id
                - name
                - price
                - stockQuantity
                - thumbnail
                type: object
                properties:
                  thumbnail:
                    type: string
                    description: 썸네일 이미지 URL
                  price:
                    type: number
                    description: 상품 가격
                  name:
                    type: string
                    description: 상품 이름
                  stockQuantity:
                    type: number
                    description: 재고 수량
                  description:
                    type: string
                    description: 상품 설명
                  id:
                    type: number
                    description: 상품 ID
        message:
          type: string
          description: 응답 메시지 입니다.
    '[request] product-register':
      title: "[request] product-register"
      required:
      - description
      - name
      - price
      type: object
      properties:
        thumbnail:
          type: string
          description: 썸네일 이미지 입니다.
          nullable: true
        price:
          type: number
          description: 상품 가격입니다. 0 이상의 수를 입력해주세요.
        name:
          type: string
          description: 상품 이름입니다.
        stockQuantity:
          type: number
          description: 상품 재고입니다. 0 이상의 수를 입력해주세요. 기본값은 0입니다.
          nullable: true
        description:
          type: string
          description: 상품 상세 설명입니다.
    '[response] get-product':
      title: "[response] get-product"
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: number
          description: HttpStatusCode 입니다.
        data:
          type: object
          properties:
            product:
              required:
              - description
              - id
              - name
              - price
              - stockQuantity
              - thumbnail
              type: object
              properties:
                thumbnail:
                  type: string
                  description: 썸네일 이미지 URL
                price:
                  type: number
                  description: 상품 가격
                name:
                  type: string
                  description: 상품 이름
                stockQuantity:
                  type: number
                  description: 재고 수량
                description:
                  type: string
                  description: 상품 설명
                id:
                  type: number
                  description: 상품 ID
        message:
          type: string
          description: 응답 메시지 입니다.
    '[response] store-register':
      title: "[response] store-register"
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: number
          description: HttpStatusCode 입니다.
        data:
          required:
          - store_id
          type: object
          properties:
            store_id:
              type: number
              description: 생성된 가게 ID 입니다.
        message:
          type: string
          description: 응답 메시지 입니다.
    '[response] make-reservation':
      title: "[response] make-reservation"
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: number
          description: HttpStatusCode 입니다.
        data:
          type: array
          items:
            required:
            - count
            - name
            - price
            type: object
            properties:
              price:
                type: string
                description: 주문된 각 상품의 금액입니다.
              count:
                type: string
                description: 주문된 각 상품의 수량입니다.
              name:
                type: string
                description: 상품 이름입니다.
        message:
          type: string
          description: 응답 메시지 입니다.
    '[request] store-register':
      title: "[request] store-register"
      required:
      - description
      - location
      - name
      type: object
      properties:
        image:
          type: string
          description: 썸네일 이미지 입니다.
          nullable: true
        contact:
          type: array
          description: 연락처입니다. 문자열 배열로 입력해주세요.
          nullable: true
          items:
            oneOf:
            - type: object
            - type: boolean
            - type: string
            - type: number
        name:
          type: string
          description: 가게 이름입니다.
        description:
          type: string
          description: 가게 상세 설명입니다.
        startTime:
          type: string
          description: 오픈시간입니다. HH:mm 형태
          nullable: true
        location:
          type: number
          description: 가게 위치입니다.
        endTime:
          type: string
          description: 마감시간입니다. HH:mm 형태
          nullable: true
    '[response] update-product':
      title: "[response] update-product"
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: number
          description: HttpStatusCode 입니다.
        data:
          type: object
          properties:
            product:
              required:
              - description
              - id
              - name
              - price
              - stockQuantity
              - thumbnail
              type: object
              properties:
                thumbnail:
                  type: string
                  description: 썸네일 이미지 URL
                price:
                  type: number
                  description: 상품 가격
                name:
                  type: string
                  description: 상품 이름
                stockQuantity:
                  type: number
                  description: 재고 수량
                description:
                  type: string
                  description: 상품 설명
                id:
                  type: number
                  description: 상품 ID
        message:
          type: string
          description: 응답 메시지 입니다.
    '[response] product-register':
      title: "[response] product-register"
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: number
          description: HttpStatusCode 입니다.
        data:
          required:
          - product_id
          type: object
          properties:
            product_id:
              type: number
              description: 생성된 상품 ID 입니다.
        message:
          type: string
          description: 응답 메시지 입니다.
    reservations-reservationId486549215:
      type: object
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []